---
description:
globs:
alwaysApply: true
---

# Development Workflow & Best Practices

## Project Setup

- This is a Next.js 15+ project with TypeScript
- Uses shadcn/ui for component library
- Tailwind CSS for styling
- ESLint for code quality

## Key Commands

Check [package.json](mdc:package.json) for available scripts:

- `npm run dev` – Start development server
- `npm run build` – Build for production
- `npm run start` – Run the production server
- `npm run lint` – Run ESLint
- `npm run type-check` - TypeScript type checking
- `npm run registry:build`: Build registry JSON from `registry/` and `registry.json` into `public/r/`.

## Code Quality

- Follow ESLint rules defined in [eslint.config.mjs](mdc:eslint.config.mjs)
- Use TypeScript strict mode as configured in [tsconfig.json](mdc:tsconfig.json)
- Follow the component structure defined in the registry system

## File Naming Conventions

- Use kebab-case for file names: `component-name.tsx`
- Use PascalCase for component names: `ComponentName`
- Use camelCase for functions and variables
- Use descriptive names that reflect the component's purpose

## Component Development Flow

1. Identify the appropriate directory in [registry/domino/](mdc:registry/domino/)
2. Create the component with proper TypeScript types
3. Create corresponding JSON metadata in [registry.json](mdc:registry.json)
4. Test the component in the development environment
5. Ensure proper exports for registry compatibility

## Git Workflow

- Keep components focused and single-purpose
- Use meaningful commit messages
- Test components before committing
- Update registry files when adding new components

## Dependencies

- Check [package-lock.json](mdc:package-lock.json) for exact dependency versions
- Use [components.json](mdc:components.json) for shadcn/ui configuration
- Follow Next.js best practices for performance and SEO
